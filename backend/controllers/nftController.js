// Add the form-data library
const { URLSearchParams } = require('url');
const Nft = require('../models/nftSchema');
const User = require('../models/userModel');
const axios = require('axios');
const FormData = require('form-data'); 

exports.createNft = async (req, res) => {
Â  try {
Â  Â  const { name, tags, picture } = req.body;
Â  Â  const userId = req.user.id; // from isLoggedIn middleware

Â  Â  if (!name || !picture) {
Â  Â  Â  return res.status(400).json({ success: false, message: 'Name and picture are required' });
Â  Â  }

Â  Â  // Create new NFT
Â  Â  const newNft = new Nft({
Â  Â  Â  name,
Â  Â  Â  tags: tags || [],
Â  Â  Â  picture,
Â  Â  });

Â  Â  const savedNft = await newNft.save();

Â  Â  // Add NFT to user's collection
Â  Â  await User.findByIdAndUpdate(userId, { $push: { nfts: savedNft._id } });

Â  Â  res.status(201).json({ success: true, nft: savedNft });
Â  } catch (error) {
Â  Â  console.error('Error creating NFT:', error);
Â  Â  res.status(500).json({ success: false, message: 'Server error' });
Â  }
};

exports.getMyNfts = async (req, res) => {
Â  try {
Â  Â  const userId = req.user.id; // from isLoggedIn middleware
Â  Â  const user = await User.findById(userId).populate('nfts');

Â  Â  if (!user) {
Â  Â  Â  return res.status(404).json({ success: false, message: 'User not found' });
Â  Â  }

Â  Â  res.status(200).json({ success: true, nfts: user.nfts });
Â  } catch (error) {
Â  Â  res.status(500).json({ success: false, message: 'Server error' });
Â  }
};

exports.evolveImagePrompt = async (req, res) => {
Â  try {
Â  Â  const { nftId, name, base_tags, max_new_tags, image } = req.body;

Â  Â  if (!nftId || !name || !base_tags || base_tags.length === 0 || !image) {
Â  Â  Â  return res.status(400).json({ success: false, message: 'nftId, name, base_tags, and image are required.' });
Â  Â  }

Â  Â  // 1. Generate the prompt
Â  Â  const analysisResponse = await axios.post('https://mk-analysis-1.onrender.com/analyze', {
Â  Â  Â  base_tag: base_tags[0],
Â  Â  Â  max_new_tags,
Â  Â  }, {
Â  Â  Â  headers: {
Â  Â  Â  Â  'Content-Type': 'application/json'
Â  Â  Â  }
Â  Â  });
Â  Â  const { base_tag, generated_tags } = analysisResponse.data;
Â  Â  const tagsString = generated_tags.join(', ');
Â  Â  const generatedPrompt = `Visually stunning masterpiece titled '${name}'. A ${base_tag} creation embodying styles of ${tagsString}. High detail, captivating aesthetic, digital evolution. It should be an evolved, mature version of the character with an aura of mystic power and strength, retaining some of the original features but showing a more powerful, aged, and wise appearance, with a slight weathered charm.`;

Â  Â  // 2. Fetch the image from the URL and convert to a Buffer
Â  Â  const imageUrl = image.replace('ipfs.io', 'gateway.pinata.cloud');
Â  Â  const imageResponse = await axios.get(imageUrl, { responseType: 'arraybuffer' });
Â  Â  const imageBuffer = Buffer.from(imageResponse.data); 

Â  Â  // 3. Call the image-to-image generation API using FormData (multipart/form-data)
Â  Â  const formData = new FormData();
Â  Â  formData.append('prompt', generatedPrompt);
Â  Â  formData.append('init_image', imageBuffer, {
Â  Â  Â  Â  filename: 'image.jpg', 
Â  Â  Â  Â  contentType: 'image/jpeg', 
Â  Â  });
Â  Â  formData.append('strength', '0.35');

Â  Â  const imageGenResponse = await axios.post(
Â  Â  Â  Â  'https://image-gen-zaqj.onrender.com/img2img',
Â  Â  Â  Â  formData,
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  headers: formData.getHeaders(),
Â  Â  Â  Â  Â  Â  // Keep responseType as 'arraybuffer' for the expected binary image result
Â  Â  Â  Â  Â  Â  responseType: 'arraybuffer' 
Â  Â  Â  Â  }
Â  Â  );
Â  Â  
Â  Â  // The response is the image data itself. Convert it to base64.
Â  Â  const imageData = Buffer.from(imageGenResponse.data, 'binary').toString('base64');
Â  Â  
Â  Â  if (imageData) {
Â  Â  Â  // Send the image data to the frontend for display
Â  Â  Â  res.status(200).json({ success: true, imageData: imageData, generatedTags: generated_tags });
Â  Â  } else {
Â  Â  Â  throw new Error("Image generation failed: No image data in response.");
Â  Â  }
Â  } catch (error) {
Â  Â  console.error('Error in evolveImagePrompt:', error);
Â  Â  
Â  Â  if (error.response) {
Â  Â  Â  // ðŸš¨ IMPROVED ERROR DECODING:
Â  Â  Â  // If responseType was 'arraybuffer', the error data is a Buffer, 
Â  Â  Â  // but the server likely sent JSON/text error details.
Â  Â  Â  let externalDetails = error.response.data;
Â  Â  Â  
Â  Â  Â  if (externalDetails instanceof Buffer) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  // Attempt to parse the Buffer as JSON
Â  Â  Â  Â  Â  externalDetails = JSON.parse(externalDetails.toString('utf8'));
Â  Â  Â  Â  } catch (e) {
Â  Â  Â  Â  Â  // If parsing fails, fall back to the raw string
Â  Â  Â  Â  Â  externalDetails = externalDetails.toString('utf8');
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  console.error('Axios Error Data (Decoded):', externalDetails);
Â  Â  Â  
Â  Â  Â  // Send the decoded error details back to the frontend
Â  Â  Â  res.status(error.response.status).json({ 
Â  Â  Â  Â  success: false, 
Â  Â  Â  Â  message: 'Error from external API', 
Â  Â  Â  Â  details: externalDetails 
Â  Â  Â  });
Â  Â  } else {
Â  Â  Â  // Handle network or non-response errors
Â  Â  Â  res.status(500).json({ success: false, message: 'Internal server error', details: error.message });
Â  Â  }
Â  }
};

exports.evolveNft = async (req, res) => {
Â  try {
Â  Â  const { nftId, newImage, newTags } = req.body;

Â  Â  if (!nftId || !newImage || !newTags) {
Â  Â  Â  return res.status(400).json({ success: false, message: 'nftId, newImage, and newTags are required' });
Â  Â  }

Â  Â  const nft = await Nft.findById(nftId);

Â  Â  if (!nft) {
Â  Â  Â  return res.status(404).json({ success: false, message: 'NFT not found' });
Â  Â  }

Â  Â  // Add current state to history
Â  Â  nft.evolutionHistory.push({
Â  Â  Â  picture: nft.picture,
Â  Â  Â  tags: nft.tags,
Â  Â  });

Â  Â  // Update to new state
Â  Â  nft.picture = newImage;
Â  Â  nft.tags = newTags;

Â  Â  const updatedNft = await nft.save();

Â  Â  res.status(200).json({ success: true, nft: updatedNft });
Â  } catch (error) {
Â  Â  console.error('Error evolving NFT:', error);
Â  Â  res.status(500).json({ success: false, message: 'Server error' });
Â  }
};